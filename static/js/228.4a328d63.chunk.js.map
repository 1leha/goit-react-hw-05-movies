{"version":3,"file":"static/js/228.4a328d63.chunk.js","mappings":"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","sources":["components/ActorsList/ActorsList.jsx","components/Cast/Cast.jsx","utils/apiService.js","utils/options.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ActorsList = ({ actors }) => {\n  return (\n    <ul>\n      {actors.map(({ id, name, character, actorPhotoPath }) => {\n        return (\n          <li key={id}>\n            <article>\n              <img src={actorPhotoPath} alt={name} />\n              <p>{name}</p>\n              <p>Character: {character}</p>\n            </article>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nActorsList.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n      character: PropTypes.string,\n      actorPhotoPath: PropTypes.string,\n    })\n  ).isRequired,\n};\n\nexport default ActorsList;\n","import ActorsList from 'components/ActorsList';\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { tmdAPI } from '../../utils/apiService';\nimport { renderMashineStatus } from '../../utils/options';\n\nconst movieAPI = new tmdAPI();\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [status, setStatus] = useState(renderMashineStatus.IDLE);\n\n  useEffect(() => {\n    setStatus(renderMashineStatus.IDLE);\n\n    movieAPI.getActors(movieId).then(actors => {\n      if (actors.length === 0) {\n        setStatus(renderMashineStatus.EMPTY);\n        return;\n      }\n      setStatus(renderMashineStatus.SUСCESS);\n      setActors(actors);\n    });\n  }, [movieId]);\n\n  if (status === renderMashineStatus.IDLE) return;\n\n  if (status === renderMashineStatus.EMPTY) {\n    return <div>We have no idea who starred in this movie.</div>;\n  }\n\n  if (status === renderMashineStatus.SUСCESS) {\n    return <ActorsList actors={actors} />;\n  }\n};\n\nexport default Cast;\n","import axios from 'axios';\nimport { apiKey, baseURL, basePosterURL } from './options';\n\naxios.defaults.baseURL = baseURL;\n\nexport class tmdAPI {\n  init = async () => {\n    await this.getTrending();\n  };\n\n  getTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${apiKey}`);\n    const trending = await response.data.results;\n    return await trending;\n  };\n\n  getMovie = async movieId => {\n    const movie = await axios.get(\n      `movie/${movieId}?api_key=${apiKey}&language=en-US`\n    );\n\n    const { genres, id, title, poster_path, vote_average, overview } =\n      await movie.data;\n    const posterPath = (await poster_path)\n      ? `${basePosterURL + poster_path}`\n      : 'https://via.placeholder.com/200x300';\n\n    return { genres, id, title, posterPath, vote_average, overview };\n  };\n\n  getActors = async movieId => {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n    );\n    const cast = await response.data.cast;\n\n    const actors = await cast.map(({ id, name, character, profile_path }) => {\n      const actorPhotoPath = profile_path\n        ? `${basePosterURL + profile_path}`\n        : 'https://via.placeholder.com/200x300';\n\n      return { id, name, character, actorPhotoPath };\n    });\n\n    return await actors;\n  };\n\n  getReviews = async movieId => {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${apiKey}&language=en-US`\n    );\n\n    return await response.data.results;\n  };\n\n  searchMovie = async query => {\n    const response = await axios.get(\n      `search/movie/?api_key=${apiKey}&language=en-US&query=${query}`\n    );\n\n    return await response.data.results;\n  };\n}\n","export const apiKey = '769e92a3a56ccf8930092eceecb76b44';\nexport const baseURL = 'https://api.themoviedb.org/3';\nexport const basePosterURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const renderMashineStatus = {\n  IDLE: 'idle',\n  EMPTY: 'empty',\n  SUСCESS: 'suсcess',\n};\n"],"names":["actors","map","id","name","character","actorPhotoPath","src","alt","movieAPI","tmdAPI","movieId","useParams","useState","setActors","renderMashineStatus","status","setStatus","useEffect","getActors","then","length","axios","baseURL","init","getTrending","getTrendingMovies","apiKey","response","data","results","trending","getMovie","movie","genres","title","poster_path","vote_average","overview","basePosterURL","posterPath","cast","profile_path","getReviews","searchMovie","query","IDLE","EMPTY","SUСCESS"],"sourceRoot":""}