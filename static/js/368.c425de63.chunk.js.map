{"version":3,"file":"static/js/368.c425de63.chunk.js","mappings":"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","sources":["components/SearchForm/SearchForm.jsx","Page/Movie/Movie.jsx","components/FilmItem/FilmItem.jsx","components/FilmList/FilmList.jsx","utils/apiService.js","utils/options.js"],"sourcesContent":["import React from 'react';\n// import PropTypes from 'prop-types'\n\nconst SearchForm = ({ onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit} autoComplete=\"off\">\n      <input type=\"text\" name=\"search\" />\n      <button type=\"subbmit\">Search</button>\n    </form>\n  );\n};\n\n// SearchForm.propTypes = {}\n\nexport default SearchForm;\n","import React, { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n// import PropTypes from 'prop-types'\n\nimport SearchForm from '../../components/SearchForm';\nimport FilmList from '../../components/FilmList';\n\nimport { tmdAPI } from '../../utils/apiService';\n\nconst movieAPI = new tmdAPI();\n\nconst Movie = () => {\n  const [searchResult, setSearchResult] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  const handlerSubmit = e => {\n    e.preventDefault();\n\n    const searchQuery = e.target.elements.search.value.trim().toLowerCase();\n\n    setSearchParams(searchQuery !== '' ? { query: searchQuery } : {});\n\n    e.target.reset();\n  };\n\n  useEffect(() => {\n    async function fetchSearchingMovies(query) {\n      setSearchResult(await movieAPI.searchMovie(query));\n    }\n\n    query && fetchSearchingMovies(query);\n  }, [query]);\n\n  return (\n    <>\n      <SearchForm onSubmit={handlerSubmit} />\n      {searchResult.length > 0 && <FilmList films={searchResult} />}\n    </>\n  );\n};\n\n// Movie.propTypes = {}\n\nexport default Movie;\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\n// import PropTypes from 'prop-types'\n\nconst FilmItem = ({ title, linkTo, linkFrom }) => {\n  return (\n    <li>\n      <NavLink to={linkTo} state={linkFrom}>\n        {title}\n      </NavLink>\n    </li>\n  );\n};\n\n// FilmItem.propTypes = {}\n\nexport default FilmItem;\n","import FilmItem from '../FilmItem';\nimport React from 'react';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst FilmList = ({ films, path = '' }) => {\n  const location = useLocation();\n\n  return (\n    <ul>\n      {films.map(({ id, title }) => {\n        return (\n          <FilmItem\n            key={id}\n            id={id}\n            title={title}\n            linkTo={`${path}${id}`}\n            linkFrom={{ from: location }}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nFilmList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n    })\n  ).isRequired,\n  path: PropTypes.string,\n};\n\nexport default FilmList;\n","import axios from 'axios';\nimport { apiKey, baseURL, basePosterURL } from './options';\n\naxios.defaults.baseURL = baseURL;\n\nexport class tmdAPI {\n  init = async () => {\n    await this.getTrending();\n  };\n\n  getTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${apiKey}`);\n    const trending = await response.data.results;\n    return await trending;\n  };\n\n  getMovie = async movieId => {\n    const movie = await axios.get(\n      `movie/${movieId}?api_key=${apiKey}&language=en-US`\n    );\n\n    const { genres, id, title, poster_path, vote_average, overview } =\n      await movie.data;\n    const posterPath = (await poster_path)\n      ? `${basePosterURL + poster_path}`\n      : 'https://via.placeholder.com/200x300';\n\n    return { genres, id, title, posterPath, vote_average, overview };\n  };\n\n  getActors = async movieId => {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n    );\n    const cast = await response.data.cast;\n\n    const actors = await cast.map(({ id, name, character, profile_path }) => {\n      const actorPhotoPath = profile_path\n        ? `${basePosterURL + profile_path}`\n        : 'https://via.placeholder.com/200x300';\n\n      return { id, name, character, actorPhotoPath };\n    });\n\n    return await actors;\n  };\n\n  getReviews = async movieId => {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${apiKey}&language=en-US`\n    );\n\n    return await response.data.results;\n  };\n\n  searchMovie = async query => {\n    const response = await axios.get(\n      `search/movie/?api_key=${apiKey}&language=en-US&query=${query}`\n    );\n\n    return await response.data.results;\n  };\n}\n","export const apiKey = '769e92a3a56ccf8930092eceecb76b44';\nexport const baseURL = 'https://api.themoviedb.org/3';\nexport const basePosterURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const renderMashineStatus = {\n  IDLE: 'idle',\n  EMPTY: 'empty',\n  SUСCESS: 'suсcess',\n};\n"],"names":["onSubmit","autoComplete","type","name","movieAPI","tmdAPI","useState","searchResult","setSearchResult","useSearchParams","searchParams","setSearchParams","query","get","useEffect","searchMovie","fetchSearchingMovies","e","preventDefault","searchQuery","target","elements","search","value","trim","toLowerCase","reset","length","FilmList","films","title","linkTo","linkFrom","to","state","path","location","useLocation","map","id","from","axios","baseURL","init","getTrending","getTrendingMovies","apiKey","response","data","results","trending","getMovie","movieId","movie","genres","poster_path","vote_average","overview","basePosterURL","posterPath","getActors","cast","character","profile_path","actorPhotoPath","actors","getReviews","renderMashineStatus","IDLE","EMPTY","SUСCESS"],"sourceRoot":""}