{"version":3,"file":"static/js/877.6d560c20.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","utils/apiService.js","utils/options.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { tmdAPI } from '../../utils/apiService';\nimport { renderMashineStatus } from '../../utils/options';\n\n// import PropTypes from 'prop-types'\n\nconst movieAPI = new tmdAPI();\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [status, setStatus] = useState(renderMashineStatus.IDLE);\n\n  useEffect(() => {\n    setStatus(renderMashineStatus.IDLE);\n\n    movieAPI.getActors(movieId).then(actors => {\n      if (actors.length === 0) {\n        setStatus(renderMashineStatus.EMPTY);\n        return;\n      }\n      setStatus(renderMashineStatus.SUСCESS);\n      setActors(actors);\n    });\n  }, [movieId]);\n\n  if (status === renderMashineStatus.IDLE) return;\n\n  if (status === renderMashineStatus.EMPTY) {\n    return <div>We have no idea who starred in this movie.</div>;\n  }\n\n  if (status === renderMashineStatus.SUСCESS) {\n    return (\n      <ul>\n        {actors.map(({ id, name, character, actorPhotoPath }) => {\n          return (\n            <li key={id}>\n              <article>\n                <img src={actorPhotoPath} alt={name} />\n                <p>{name}</p>\n                <p>Character: {character}</p>\n              </article>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n};\n\n// Cast.propTypes = {}\n\nexport default Cast;\n","import axios from 'axios';\nimport { apiKey, baseURL, basePosterURL } from './options';\n\naxios.defaults.baseURL = baseURL;\n\nexport class tmdAPI {\n  constructor() {\n    this.trending = [];\n    this.movieDetails = '';\n    this.movieCredits = '';\n    this.movieReviews = '';\n    this.genres = [];\n  }\n\n  init = async () => {\n    await this.getTrending();\n  };\n\n  getTrendingMovies = async () => {\n    const response = await axios.get(`trending/movie/day?api_key=${apiKey}`);\n    const trending = await response.data.results;\n    return await trending;\n  };\n\n  getMovie = async movieId => {\n    const movie = await axios.get(\n      `movie/${movieId}?api_key=${apiKey}&language=en-US`\n    );\n\n    const { genres, id, title, poster_path, vote_average, overview } =\n      await movie.data;\n    const posterPath = (await poster_path)\n      ? `${basePosterURL + poster_path}`\n      : 'https://via.placeholder.com/200x300';\n\n    return { genres, id, title, posterPath, vote_average, overview };\n\n    //   https://api.themoviedb.org/3/movie/{movie_id}?api_key=<<api_key>>&language=en-US\n  };\n\n  getActors = async movieId => {\n    const response = await axios.get(\n      `movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n    );\n    const cast = await response.data.cast;\n    // console.log('cast :>> ', cast);\n\n    const actors = await cast.map(({ id, name, character, profile_path }) => {\n      const actorPhotoPath = profile_path\n        ? `${basePosterURL + profile_path}`\n        : 'https://via.placeholder.com/200x300';\n\n      return { id, name, character, actorPhotoPath };\n    });\n\n    //   https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\n\n    return await actors;\n  };\n\n  getReviews = async movieId => {\n    const response = await axios.get(\n      `movie/${movieId}/reviews?api_key=${apiKey}&language=en-US`\n    );\n\n    // console.log('response :>> ');\n\n    return await response.data.results;\n  };\n\n  searchMovie = async query => {\n    // query = query.trim().toLowerCase();\n\n    // console.log('searchMovie query :>> ', query);\n\n    const response = await axios.get(\n      `search/movie/?api_key=${apiKey}&language=en-US&query=${query}`\n    );\n\n    // console.log('response :>> ', response);\n\n    return await response.data.results;\n  };\n}\n","export const apiKey = '769e92a3a56ccf8930092eceecb76b44';\nexport const baseURL = 'https://api.themoviedb.org/3';\nexport const basePosterURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const renderMashineStatus = {\n  IDLE: 'idle',\n  EMPTY: 'empty',\n  SUСCESS: 'suсcess',\n};\n"],"names":["movieAPI","tmdAPI","movieId","useParams","useState","actors","setActors","renderMashineStatus","status","setStatus","useEffect","getActors","then","length","map","id","name","character","actorPhotoPath","src","alt","axios","baseURL","init","getTrending","getTrendingMovies","apiKey","response","data","results","trending","getMovie","movie","genres","title","poster_path","vote_average","overview","basePosterURL","posterPath","cast","profile_path","getReviews","searchMovie","query","this","movieDetails","movieCredits","movieReviews","IDLE","EMPTY","SUСCESS"],"sourceRoot":""}